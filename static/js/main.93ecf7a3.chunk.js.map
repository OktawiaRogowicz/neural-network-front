{"version":3,"sources":["Timer.js","PlayButton.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","isPaused","mode","secondsLeft","setSecondsLeft","secondsLeftRef","useRef","isPausedRef","useEffect","current","workMinutes","interval","setInterval","stop","clearInterval","percentage","Math","round","minutes","floor","seconds","style","width","height","value","text","styles","buildStyles","textColor","pathColor","trailColor","strokeWidth","PlayButton","xmlns","className","viewBox","fill","fillRule","d","clipRule","App","currentWord","String","canvasRef","contextRef","timerRef","createRef","isDrawing","setIsDrawing","isGameStarted","setIsGameStarted","isGameFinished","setIsGameFinished","isStarted","setIsStarted","canvas","border","backgroundColor","scale","context","getContext","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","finishDrawing","closePath","draw","lineTo","stroke","clear","clearRect","stopTimer","handleDownload","document","getElementById","toBlob","blob","FileSaver","saveAs","duration","collapsed","render","onToggle","setCollapsibleElement","progress","ref","transform","onClick","display","class","cursor","pointerEvents","id","onMouseDown","onMouseUp","onMouseMove","onDoubleClick","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.93ecf7a3.chunk.js","sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport {useContext, useState, useEffect, useRef} from \"react\";\n\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer(props) {\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [mode, setMode] = useState('work'); // work/break/null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  const workMinutes = 0.25;\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n\n    secondsLeftRef.current = workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return props.stop();\n      }\n\n      tick();\n    },1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const totalSeconds = workMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if(seconds < 10) seconds = '0'+seconds;\n\n  return (\n    <div style={{width: 100, height: 100}}>\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + ':' + seconds}\n        styles={buildStyles({\n        textColor:'#fff',\n        pathColor:mode === 'work' ? red : green,\n        trailColor:'#fff',\n        strokeWidth: 10,\n      })} />\n    </div>\n  );\n}\n\nexport default Timer;","function PlayButton(props) {\n    return (\n      <button {...props}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n        </svg>\n      </button>\n    );\n  }\n  \n  export default PlayButton;","import './App.css';\nimport { createRef, useEffect, useRef, useState, useContext } from 'react';\nimport Timer from \"./Timer\";\nimport PlayButton from \"./PlayButton\";\nimport SlideToggle from \"react-slide-toggle\";\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport FileSaver from 'file-saver';\n\nfunction App() {\n\n  const currentWord = String('generated word')\n\n  const canvasRef = useRef(null)\n  const contextRef = useRef(null)\n  const timerRef = createRef()\n\n  const [isDrawing, setIsDrawing] = useState(false)\n  const [isGameStarted, setIsGameStarted] = useState(false)\n  const [isGameFinished, setIsGameFinished] = useState(false)\n\n  const [isStarted, setIsStarted] = useState(true)\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 400;\n    canvas.height = 400;\n    canvas.style.width = `400px`;\n    canvas.style.height = `400px`;\n    canvas.style.border = '3px solid gold';\n    canvas.style.backgroundColor = '#fff';\n    canvas.scale = 1;\n\n    const context = canvas.getContext(\"2d\")\n    context.scale(1,1)\n    context.lineCap = \"round\"\n    context.strokeStyle = \"black\"\n    context.lineWidth = 10\n    contextRef.current = context;\n  }, [])\n\n  const startDrawing = ({nativeEvent}) => {\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath()\n    contextRef.current.moveTo(offsetX, offsetY)\n    setIsDrawing(true)\n  }\n\n  const finishDrawing = () => {\n    contextRef.current.closePath()\n    setIsDrawing(false)\n  }\n\n  const draw = ({nativeEvent}) => {\n    if(!isDrawing) {\n      return\n    }\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY)\n    contextRef.current.stroke()\n  }\n\n  const clear = () => {\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\n    contextRef.current.beginPath();\n  }\n\n  const hideStart = () => {\n    setIsStarted(false)\n  }\n\n  const startRound = () => {\n    setIsGameStarted(false)\n    setIsGameFinished(false)\n    clear();\n  }\n\n  const stopTimer = () => {\n    setIsGameFinished(true)\n  }\n\n  const handleDownload = () => {\n    var canvas = document.getElementById(\"my-canvas\");\n    canvas.toBlob(function(blob) {\n      FileSaver.saveAs(blob, \"image.png\");\n    });\n  }\n\n  return (\n    <main>\n      \n      <SlideToggle duration={800} collapsed\n      render={({ onToggle, setCollapsibleElement, progress }) => (\n        <div>\n          <div className=\"my-collapsible\">\n            <div className=\"my-collapsible__content\" ref={setCollapsibleElement}>\n              <div className=\"my-collapsible__content-inner\"\n              style={{\n                transform: `translateY(${Math.round(20 * (-1 + progress))}px)`\n              }}\n              >\n                <p>\n                  Try and draw\n                </p>\n                <h1>\n                    {currentWord}\n                </h1>\n                <p>\n                  in 15 seconds\n                </p>\n\n                <PlayButton onClick={ () => { onToggle(); setIsGameStarted(true) }}/>\n              </div>\n            </div>\n            <div style={isStarted ? {height: \"100vh\"} : { height: \"100vh\", display: 'none' }}>\n              <PlayButton onClick={ () => { onToggle(); hideStart()}}/>\n            </div>\n          </div>\n\n        <div class='game-container' style={ isGameStarted ? {} : {display: 'none'}}>\n          { isGameStarted && <div className=\"parent timer__content\">\n            <div/>\n            <div class='child inline-block-child'>\n              {currentWord}\n            </div>\n            <div/>\n            <div class='child inline-block-child'>\n              <Timer stop={stopTimer} ref={timerRef}/>\n            </div>\n            <div/>\n          </div> }\n\n          <div class='canvas-container' style={ !isGameFinished ? {} : { cursor: 'not-allowed', pointerEvents: 'none' }}>\n            <canvas id='my-canvas'\n              onMouseDown={startDrawing}\n              onMouseUp={finishDrawing}\n              onMouseMove={draw}\n              onDoubleClick={clear}\n              ref={canvasRef}\n            />\n          </div>\n          <div style={ isGameFinished ? {} : { display: 'none' }}>\n            Time has finished!\n            Save your work and continue.\n            <button style={{color: 'gold'}} onClick={handleDownload}> Save</button> \n            <PlayButton style={{color: 'gold'}} onClick={ () => { onToggle(); startRound() }}/>\n          </div>\n        </div>\n      </div>\n      )}/>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}