{"version":3,"sources":["Timer.js","PlayButton.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","isPaused","mode","secondsLeft","setSecondsLeft","secondsLeftRef","useRef","isPausedRef","useEffect","current","workMinutes","interval","setInterval","stop","clearInterval","percentage","Math","round","minutes","floor","seconds","style","width","height","value","text","styles","buildStyles","textColor","pathColor","trailColor","strokeWidth","PlayButton","xmlns","className","viewBox","fill","fillRule","d","clipRule","App","listOfCategories","index","setIndex","canvasRef","contextRef","timerRef","createRef","isDrawing","setIsDrawing","isGameStarted","setIsGameStarted","isGameFinished","setIsGameFinished","isStarted","setIsStarted","isFinished","setIsFinished","canvas","border","backgroundColor","scale","context","getContext","lineCap","strokeStyle","lineWidth","startDrawing","nativeEvent","offsetX","offsetY","beginPath","moveTo","getWord","finishDrawing","closePath","draw","lineTo","stroke","clear","clearRect","startRound","changeCanvasBorder","stopTimer","handleDownload","document","getElementById","toBlob","blob","FileSaver","saveAs","Emoji","role","label","symbol","DrawText","console","log","marginBottom","onClick","on","FinishedText","href","window","location","reload","CollapsibleText","duration","collapsed","render","onToggle","setCollapsibleElement","progress","ref","transform","display","cursor","pointerEvents","id","onMouseDown","onMouseUp","onMouseMove","onDoubleClick","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.d9527828.chunk.js","sourcesContent":["import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport {useContext, useState, useEffect, useRef} from \"react\";\n\nconst red = '#f54e4e';\nconst green = '#4aec8c';\n\nfunction Timer(props) {\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [mode, setMode] = useState('work'); // work/break/null\n  const [secondsLeft, setSecondsLeft] = useState(0);\n\n  const secondsLeftRef = useRef(secondsLeft);\n  const isPausedRef = useRef(isPaused);\n  const modeRef = useRef(mode);\n\n  const workMinutes = 0.25;\n\n  function tick() {\n    secondsLeftRef.current--;\n    setSecondsLeft(secondsLeftRef.current);\n  }\n\n  useEffect(() => {\n\n    secondsLeftRef.current = workMinutes * 60;\n    setSecondsLeft(secondsLeftRef.current);\n\n    const interval = setInterval(() => {\n      if (isPausedRef.current) {\n        return;\n      }\n      if (secondsLeftRef.current === 0) {\n        return props.stop();\n      }\n\n      tick();\n    },1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const totalSeconds = workMinutes * 60;\n  const percentage = Math.round(secondsLeft / totalSeconds * 100);\n\n  const minutes = Math.floor(secondsLeft / 60);\n  let seconds = secondsLeft % 60;\n  if(seconds < 10) seconds = '0'+seconds;\n\n  return (\n    <div style={{width: 80, height: 80}}>\n      <CircularProgressbar\n        value={percentage}\n        text={minutes + ':' + seconds}\n        styles={buildStyles({\n        textColor:'#fff',\n        pathColor:mode === 'work' ? red : green,\n        trailColor:'#fff',\n        strokeWidth: 10,\n      })} />\n    </div>\n  );\n}\n\nexport default Timer;","function PlayButton(props) {\n    return (\n      <button {...props}>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n          <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n        </svg>\n      </button>\n    );\n  }\n  \n  export default PlayButton;","import './App.css';\nimport { createRef, useEffect, useRef, useState, useContext } from 'react';\nimport Timer from \"./Timer\";\nimport PlayButton from \"./PlayButton\";\nimport SlideToggle from \"react-slide-toggle\";\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport FileSaver from 'file-saver';\n\nfunction App() {\n\n  const listOfCategories = ['cookie', 'smartphone', 'carrot', 'broccoli', 'floor lamp', 'grass', 'moon', 'mug', 'sword', 'sun']\n  const [index, setIndex] = useState(0)\n\n  const canvasRef = useRef(null)\n  const contextRef = useRef(null)\n  const timerRef = createRef()\n\n  const [isDrawing, setIsDrawing] = useState(false)\n  const [isGameStarted, setIsGameStarted] = useState(false)\n  const [isGameFinished, setIsGameFinished] = useState(false)\n\n  const [isStarted, setIsStarted] = useState(true)\n  const [isFinished, setIsFinished] = useState(false)\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = 400;\n    canvas.height = 400;\n    canvas.style.width = `400px`;\n    canvas.style.height = `400px`;\n    canvas.style.border = '3px solid gold';\n    canvas.style.backgroundColor = '#fff';\n    canvas.scale = 1;\n\n    const context = canvas.getContext(\"2d\")\n    context.scale(1,1)\n    context.lineCap = \"round\"\n    context.strokeStyle = \"black\"\n    context.lineWidth = 10\n    contextRef.current = context;\n  }, [])\n\n  const startDrawing = ({nativeEvent}) => {\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath()\n    contextRef.current.moveTo(offsetX, offsetY)\n    setIsDrawing(true)\n  }\n\n  const getWord = () => { return listOfCategories[index]}\n\n  const finishDrawing = () => {\n    contextRef.current.closePath()\n    setIsDrawing(false)\n  }\n\n  const draw = ({nativeEvent}) => {\n    if(!isDrawing) {\n      return\n    }\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY)\n    contextRef.current.stroke()\n  }\n\n  const clear = () => {\n    contextRef.current.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\n    contextRef.current.beginPath();\n  }\n\n  const hideStart = () => {\n    setIsStarted(false)\n  }\n\n  const startRound = () => {\n    if(isGameFinished) {\n      var i = index;\n      setIndex(i + 1)\n    }\n    if(index == 9) {\n      setIsFinished(true)\n    }\n\n    setIsGameStarted(false)\n    setIsGameFinished(false)\n    changeCanvasBorder('3px solid gold');\n    clear();\n\n  }\n\n  const stopTimer = () => {\n    setIsGameFinished(true)\n    changeCanvasBorder('3px solid lightgray');\n  }\n\n  const handleDownload = () => {\n    var canvas = document.getElementById(\"my-canvas\");\n    canvas.toBlob(function(blob) {\n      FileSaver.saveAs(blob, \"image.png\");\n    });\n  }\n\n  const changeCanvasBorder = (style) => {\n    const canvas = canvasRef.current;\n    canvas.style.border = style;\n  }\n\n  const Emoji = props => (\n    <span\n      className=\"emoji\"\n      role=\"img\"\n      aria-label={props.label ? props.label : \"\"}\n      aria-hidden={props.label ? \"false\" : \"true\"}\n    >\n      {props.symbol}\n    </span>\n  )\n\n  function DrawText(props) {\n    console.log(\"draw\");\n    return (<div>\n      <p>Try and draw</p>\n      <h1>{getWord()}</h1>\n      <p style={{marginBottom: '5vh'}}>in 15 seconds</p>\n      <PlayButton onClick={ () => { props.on(); setIsGameStarted(true) }}/>\n    </div>);\n  }\n  \n  function FinishedText(props) {\n    console.log(\"finished\");\n    let url = \"https://drive.google.com/drive/folders/1EDM_9kNhp_OL_SH8GiF8XVE2j_hH2Qjm?usp=sharing\";\n    return (<div>\n      <p>{`\n      To wszystko!\n      \n      Zapisane obrazki mozesz przeslac mi na discordzie (Supernova#6608)\n      lub wrzucić do tego dysku Google:`}</p> <a href={url}> klik </a> <p style={{marginBottom: '5vh'}}>{`\n\n      Za około miesiąc powinna zaś powstać nowa wersja tego oto frontu - juz w formie zabawy z siecia neuronowa. ;)\n\n      `}</p>\n      <p><b>{`Dziękuję za pomoc! `}</b><Emoji symbol=\"💛\"/></p> \n      <p style={{marginBottom: '5vh'}}>{`Jezeli chcesz zagrac ponownie - kliknij przycisk.`}</p>\n      <PlayButton onClick={ () => window.location.reload(true) }/>\n    </div>);\n  }\n\n  function CollapsibleText(props) {\n    const isFinished = props.isFinished;\n    if (!isFinished) {\n      return <DrawText on={() => props.on()}/>\n    }\n    return <FinishedText />;\n  }\n\n  return (\n    <main>\n      \n      <SlideToggle duration={800} collapsed\n      render={({ onToggle, setCollapsibleElement, progress }) => (\n        <div>\n          <div className=\"my-collapsible\">\n            <div className=\"my-collapsible__content\" ref={setCollapsibleElement}>\n              <div className=\"my-collapsible__content-inner\"\n              style={{\n                transform: `translateY(${Math.round(20 * (-1 + progress))}px)`\n              }}\n              >\n                <CollapsibleText isFinished={isFinished} on={() => onToggle()}/>\n              </div>\n            </div>\n            <div style={isStarted ? {height: \"100vh\"} : { height: \"100vh\", display: 'none' }}>\n              \n              <div className=\"welcome\">\n              <p><b>{`Hej! `}</b><Emoji symbol=\"👋\"/></p> \n              <p style={{marginBottom: '5vh'}}>{`\n                Skoro tutaj jesteś, zdecydował*ś się pomóc mi w pracy inzynierskiej. Dziękuję! :)\n\n                Celem mojej pracy jest odtworzenie gry Quick, Draw!, którą stworzyło Google. Będę tworzyć sieć neurnonową, czyli AI, które spróbuje rozpoznać, czy narysowano obrazek zgodny z wylosowanym tematem. Ale bazę danych zbieram sama - i dlatego właśnie potrzebuję pomocy!\n\n                Ta strona jest stworzona właśnie po to - twoim zadaniem będzie dziesięć razy w przeciągu 15 sekund narysować otrzymane hasło, zapisać je lokalnie na komputerze, a potem mi je przesłać. Zabawa na razie na tym się kończy - ale za to za miesiąc powinnam zarzucić stroną, na której po kazdym rysunku sieć będzie próbowała go odgadnąć, a do nauczenia jej tego uzyte były obrazki was wszystkich!\n                \n                Gotów?\n                `}</p>\n                <PlayButton onClick={ () => { onToggle(); hideStart(); startRound()}}/>\n              </div>\n            </div>\n          </div>\n\n        <div className='game-container' style={ isGameStarted ? {} : {display: 'none'}}>\n          { isGameStarted && <div className=\"parent timer__content\">\n            <div/>\n            <div className='child inline-block-child'>\n              <h1>{getWord()}</h1>\n            </div>\n            <div/>\n            <div className='child inline-block-child'>\n              <Timer stop={stopTimer} ref={timerRef}/>\n            </div>\n            <div/>\n          </div> }\n          \n          <div className='game-container-inner'>\n            <h1>Draw here!</h1>\n          </div>\n          <div className='game-container-inner'>\n            <div className='canvas-container' style={ !isGameFinished ? {} : { cursor: 'not-allowed', pointerEvents: 'none' }}>\n              <canvas id='my-canvas'\n                onMouseDown={startDrawing}\n                onMouseUp={finishDrawing}\n                onMouseMove={draw}\n                onDoubleClick={clear}\n                ref={canvasRef}\n              />\n            </div>\n          </div>\n            <div style={ isGameFinished ? {} : { display: 'none' }}>\n              <div className='game-container-inner'>\n                <p>{`Time has finished!\n                Save your work and continue`}</p>\n              </div>\n              <div className='game-container-inner'>\n                <button style={{color: 'gold'}} onClick={handleDownload}> Save</button> \n              </div>\n              <div className='game-container-inner'>\n                <PlayButton style={{color: 'gold', width: 60, height: 60}} onClick={ () => { onToggle(); startRound() }}/>\n              </div>\n            </div>\n        </div>\n\n      </div>\n      )}/>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}